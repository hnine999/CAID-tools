grammar edu.vanderbilt.isis.caid.assurancedsl.Assurance with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate assurance "http://www.vanderbilt.edu/isis/caid/assurancedsl/Assurance"

AssuranceModel:
    assurancemodels += GSNDefinition*
;

GSNDefinition:
    Goals|Strategies|Contexts|Assumptions|Justifications|Solutions
;

Goals:
    'GOALS'  name=ID  
    BEGIN
        goals += GoalNode*
    END
;
Strategies:
    'STRATEGIES'  name=ID  
    BEGIN
        strategies += StrategyNode*
    END
;
Contexts:
    'CONTEXTS' name=ID 
    BEGIN
        contexts += ContextNode*
    END
;
Assumptions:
    'ASSUMPTIONS'  name=ID 
    BEGIN
        assumptions += AssumptionNode*
    END
;
Justifications:
    'JUSTIFICATIONS'  name=ID 
    BEGIN
        justifications += JustificationNode*
    END
;
Solutions:
    'SOLUTIONS'  name=ID 
    BEGIN
        solutions += SolutionNode*
    END
;
GoalSupportNodes:
    GoalNode
    | StrategyNode
    | SolutionNode
    | GoalNodeRef
    | StrategyNodeRef
    | SolutionNodeRef
    ;

StrategySupportNodes:
    GoalNode
    | StrategyNode
    | GoalNodeRef
    | StrategyNodeRef
    ;

ContextNodes:
    ContextNode
    | ContextNodeRef
;

AssumptionNodes:
    AssumptionNode
    | AssumptionNodeRef
;

JustificationNodes:
    JustificationNode
    | JustificationNodeRef
;

ALLNodes: 
    GoalNode
    | StrategyNode
    | SolutionNode
    | ContextNode
    | AssumptionNode
    | JustificationNode
    
;

GoalNodeRef:
    'ref_goal' ref=[GoalNode|RefFQN]
;

StrategyNodeRef:
    'ref_strategy' ref=[StrategyNode|RefFQN]
;

SolutionNodeRef:
    'ref_solution' ref=[SolutionNode|RefFQN]
;

ContextNodeRef:
    'ref_context' ref=[ContextNode|RefFQN]
;
AssumptionNodeRef:
    'ref_assumption' ref=[AssumptionNode|RefFQN]
;
JustificationNodeRef:
    'ref_justification' ref=[JustificationNode|RefFQN]
;

GoalDetails:
    GoalSupportNodes|
    ContextNodes|
    AssumptionNodes|
    JustificationNodes
;

StrategyDetails:
    StrategySupportNodes|
    ContextNodes|
    AssumptionNodes|
    JustificationNodes
;
    
GoalNode:
    'goal' name=ID
     BEGIN
        (details += BaseNode)
        ('status'status = SolutionStatus)?
        (nodedetails += GoalDetails*)
     END
     ;

StrategyNode:
    'strategy' name=ID
     BEGIN
           (details += BaseNode)
          (nodedetails += StrategyDetails*)
     END
    ;

ContextNode:
    'context' name=ID
     BEGIN
          (details += BaseNode)
     END
    ;
    
AssumptionNode:
    'assumption' name=ID
     BEGIN
          (details += BaseNode)
     END
    ;

JustificationNode:
    'justification' name=ID
     BEGIN
          (details += BaseNode)
     END
    ;

SolutionNode:
    'solution' name=ID
     BEGIN
          (details += BaseNode)
          ('status'status = SolutionStatus)?
     END
    ;

BaseNode:
      {BaseNode}
      (uuid=UUIDType)?
      (summary += Summary)?
      (info += Description)?
      (labels +=LabelInfo*)
      (artifacts += URIA*)
    ;

enum SolutionStatus:
    NotReviewed = 'NotReviewed' |
    Approved = 'Approved' |
    Disapproved = 'Disapproved'
    ;

UUIDType: 
    'uuid' info=GUID
    ;

Summary: 
    'summary' info=ML_INFO
    ;

Description: 
    'info' info=ML_INFO
    ;

LabelInfo:
    'label' name=ID
    ;
    
URIA: 
    'artifact' uri=STRING
    ;

RefFQN: // this rules matches either an FQN or a simple identifier
    ID ("." ID)*;

terminal ML_INFO : '\"'  -> '\"';
terminal NL:
    ('\r'|'\n')+;

terminal BEGIN: 'synthetic:BEGIN';  // increase indentation
terminal END: 'synthetic:END';      // decrease indentation
terminal GUID:'{'?('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')'-'('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')'-'('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')'-'('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')'-'('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')'}'?;