// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: depi.proto

package depi_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Depi_Login_FullMethodName                         = "/Depi/Login"
	Depi_LoginWithToken_FullMethodName                = "/Depi/LoginWithToken"
	Depi_Logout_FullMethodName                        = "/Depi/Logout"
	Depi_RegisterCallback_FullMethodName              = "/Depi/RegisterCallback"
	Depi_WatchResourceGroup_FullMethodName            = "/Depi/WatchResourceGroup"
	Depi_UnwatchResourceGroup_FullMethodName          = "/Depi/UnwatchResourceGroup"
	Depi_CreateBranch_FullMethodName                  = "/Depi/CreateBranch"
	Depi_SetBranch_FullMethodName                     = "/Depi/SetBranch"
	Depi_CreateTag_FullMethodName                     = "/Depi/CreateTag"
	Depi_GetLastKnownVersion_FullMethodName           = "/Depi/GetLastKnownVersion"
	Depi_UpdateResourceGroup_FullMethodName           = "/Depi/UpdateResourceGroup"
	Depi_AddResourcesToBlackboard_FullMethodName      = "/Depi/AddResourcesToBlackboard"
	Depi_RemoveResourcesFromBlackboard_FullMethodName = "/Depi/RemoveResourcesFromBlackboard"
	Depi_LinkBlackboardResources_FullMethodName       = "/Depi/LinkBlackboardResources"
	Depi_UnlinkBlackboardResources_FullMethodName     = "/Depi/UnlinkBlackboardResources"
	Depi_GetBlackboardResources_FullMethodName        = "/Depi/GetBlackboardResources"
	Depi_SaveBlackboard_FullMethodName                = "/Depi/SaveBlackboard"
	Depi_ClearBlackboard_FullMethodName               = "/Depi/ClearBlackboard"
	Depi_GetDirtyLinks_FullMethodName                 = "/Depi/GetDirtyLinks"
	Depi_GetDirtyLinksAsStream_FullMethodName         = "/Depi/GetDirtyLinksAsStream"
	Depi_MarkLinksClean_FullMethodName                = "/Depi/MarkLinksClean"
	Depi_MarkInferredDirtinessClean_FullMethodName    = "/Depi/MarkInferredDirtinessClean"
	Depi_GetBidirectionalChanges_FullMethodName       = "/Depi/GetBidirectionalChanges"
	Depi_ApproveBidirectionalChange_FullMethodName    = "/Depi/ApproveBidirectionalChange"
	Depi_GetResourceGroups_FullMethodName             = "/Depi/GetResourceGroups"
	Depi_GetResources_FullMethodName                  = "/Depi/GetResources"
	Depi_GetResourcesAsStream_FullMethodName          = "/Depi/GetResourcesAsStream"
	Depi_GetLinks_FullMethodName                      = "/Depi/GetLinks"
	Depi_GetAllLinksAsStream_FullMethodName           = "/Depi/GetAllLinksAsStream"
	Depi_GetLinksAsStream_FullMethodName              = "/Depi/GetLinksAsStream"
	Depi_GetDependencyGraph_FullMethodName            = "/Depi/GetDependencyGraph"
	Depi_GetBranchList_FullMethodName                 = "/Depi/GetBranchList"
	Depi_UpdateDepi_FullMethodName                    = "/Depi/UpdateDepi"
	Depi_WatchBlackboard_FullMethodName               = "/Depi/WatchBlackboard"
	Depi_WatchDepi_FullMethodName                     = "/Depi/WatchDepi"
	Depi_UnwatchBlackboard_FullMethodName             = "/Depi/UnwatchBlackboard"
	Depi_UnwatchDepi_FullMethodName                   = "/Depi/UnwatchDepi"
	Depi_AddResourceGroup_FullMethodName              = "/Depi/AddResourceGroup"
	Depi_EditResourceGroup_FullMethodName             = "/Depi/EditResourceGroup"
	Depi_RemoveResourceGroup_FullMethodName           = "/Depi/RemoveResourceGroup"
	Depi_AddResource_FullMethodName                   = "/Depi/AddResource"
	Depi_LinkResources_FullMethodName                 = "/Depi/LinkResources"
	Depi_UnlinkResources_FullMethodName               = "/Depi/UnlinkResources"
	Depi_CurrentBranch_FullMethodName                 = "/Depi/CurrentBranch"
	Depi_GetResourceGroupsForTag_FullMethodName       = "/Depi/GetResourceGroupsForTag"
	Depi_Ping_FullMethodName                          = "/Depi/Ping"
)

// DepiClient is the client API for Depi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepiClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	LoginWithToken(ctx context.Context, in *LoginWithTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	RegisterCallback(ctx context.Context, in *RegisterCallbackRequest, opts ...grpc.CallOption) (Depi_RegisterCallbackClient, error)
	WatchResourceGroup(ctx context.Context, in *WatchResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	UnwatchResourceGroup(ctx context.Context, in *UnwatchResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	SetBranch(ctx context.Context, in *SetBranchRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetLastKnownVersion(ctx context.Context, in *GetLastKnownVersionRequest, opts ...grpc.CallOption) (*GetLastKnownVersionResponse, error)
	UpdateResourceGroup(ctx context.Context, in *UpdateResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddResourcesToBlackboard(ctx context.Context, in *AddResourcesToBlackboardRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	RemoveResourcesFromBlackboard(ctx context.Context, in *RemoveResourcesFromBlackboardRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	LinkBlackboardResources(ctx context.Context, in *LinkBlackboardResourcesRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	UnlinkBlackboardResources(ctx context.Context, in *UnlinkBlackboardResourcesRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetBlackboardResources(ctx context.Context, in *GetBlackboardResourcesRequest, opts ...grpc.CallOption) (*GetBlackboardResourcesResponse, error)
	SaveBlackboard(ctx context.Context, in *SaveBlackboardRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	ClearBlackboard(ctx context.Context, in *ClearBlackboardRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetDirtyLinks(ctx context.Context, in *GetDirtyLinksRequest, opts ...grpc.CallOption) (*GetDirtyLinksResponse, error)
	GetDirtyLinksAsStream(ctx context.Context, in *GetDirtyLinksRequest, opts ...grpc.CallOption) (Depi_GetDirtyLinksAsStreamClient, error)
	MarkLinksClean(ctx context.Context, in *MarkLinksCleanRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	MarkInferredDirtinessClean(ctx context.Context, in *MarkInferredDirtinessCleanRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetBidirectionalChanges(ctx context.Context, in *GetBidirectionalChangesRequest, opts ...grpc.CallOption) (*GetBidirectionalChangesResponse, error)
	ApproveBidirectionalChange(ctx context.Context, in *ApproveBidirectionalChangeRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetResourceGroups(ctx context.Context, in *GetResourceGroupsRequest, opts ...grpc.CallOption) (*GetResourceGroupsResponse, error)
	GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error)
	GetResourcesAsStream(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (Depi_GetResourcesAsStreamClient, error)
	GetLinks(ctx context.Context, in *GetLinksRequest, opts ...grpc.CallOption) (*GetLinksResponse, error)
	GetAllLinksAsStream(ctx context.Context, in *GetAllLinksAsStreamRequest, opts ...grpc.CallOption) (Depi_GetAllLinksAsStreamClient, error)
	GetLinksAsStream(ctx context.Context, in *GetLinksRequest, opts ...grpc.CallOption) (Depi_GetLinksAsStreamClient, error)
	GetDependencyGraph(ctx context.Context, in *GetDependencyGraphRequest, opts ...grpc.CallOption) (*GetDependencyGraphResponse, error)
	GetBranchList(ctx context.Context, in *GetBranchListRequest, opts ...grpc.CallOption) (*GetBranchListResponse, error)
	UpdateDepi(ctx context.Context, in *UpdateDepiRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	WatchBlackboard(ctx context.Context, in *WatchBlackboardRequest, opts ...grpc.CallOption) (Depi_WatchBlackboardClient, error)
	WatchDepi(ctx context.Context, in *WatchDepiRequest, opts ...grpc.CallOption) (Depi_WatchDepiClient, error)
	UnwatchBlackboard(ctx context.Context, in *UnwatchBlackboardRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	UnwatchDepi(ctx context.Context, in *UnwatchDepiRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddResourceGroup(ctx context.Context, in *AddResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	EditResourceGroup(ctx context.Context, in *EditResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	RemoveResourceGroup(ctx context.Context, in *RemoveResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	LinkResources(ctx context.Context, in *LinkResourcesRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	UnlinkResources(ctx context.Context, in *UnlinkResourcesRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	CurrentBranch(ctx context.Context, in *CurrentBranchRequest, opts ...grpc.CallOption) (*CurrentBranchResponse, error)
	GetResourceGroupsForTag(ctx context.Context, in *GetResourceGroupsForTagRequest, opts ...grpc.CallOption) (*GetResourceGroupsResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type depiClient struct {
	cc grpc.ClientConnInterface
}

func NewDepiClient(cc grpc.ClientConnInterface) DepiClient {
	return &depiClient{cc}
}

func (c *depiClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Depi_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) LoginWithToken(ctx context.Context, in *LoginWithTokenRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Depi_LoginWithToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_Logout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) RegisterCallback(ctx context.Context, in *RegisterCallbackRequest, opts ...grpc.CallOption) (Depi_RegisterCallbackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Depi_ServiceDesc.Streams[0], Depi_RegisterCallback_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &depiRegisterCallbackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Depi_RegisterCallbackClient interface {
	Recv() (*ResourcesUpdatedNotification, error)
	grpc.ClientStream
}

type depiRegisterCallbackClient struct {
	grpc.ClientStream
}

func (x *depiRegisterCallbackClient) Recv() (*ResourcesUpdatedNotification, error) {
	m := new(ResourcesUpdatedNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *depiClient) WatchResourceGroup(ctx context.Context, in *WatchResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_WatchResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) UnwatchResourceGroup(ctx context.Context, in *UnwatchResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_UnwatchResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_CreateBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) SetBranch(ctx context.Context, in *SetBranchRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_SetBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_CreateTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) GetLastKnownVersion(ctx context.Context, in *GetLastKnownVersionRequest, opts ...grpc.CallOption) (*GetLastKnownVersionResponse, error) {
	out := new(GetLastKnownVersionResponse)
	err := c.cc.Invoke(ctx, Depi_GetLastKnownVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) UpdateResourceGroup(ctx context.Context, in *UpdateResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_UpdateResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) AddResourcesToBlackboard(ctx context.Context, in *AddResourcesToBlackboardRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_AddResourcesToBlackboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) RemoveResourcesFromBlackboard(ctx context.Context, in *RemoveResourcesFromBlackboardRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_RemoveResourcesFromBlackboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) LinkBlackboardResources(ctx context.Context, in *LinkBlackboardResourcesRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_LinkBlackboardResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) UnlinkBlackboardResources(ctx context.Context, in *UnlinkBlackboardResourcesRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_UnlinkBlackboardResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) GetBlackboardResources(ctx context.Context, in *GetBlackboardResourcesRequest, opts ...grpc.CallOption) (*GetBlackboardResourcesResponse, error) {
	out := new(GetBlackboardResourcesResponse)
	err := c.cc.Invoke(ctx, Depi_GetBlackboardResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) SaveBlackboard(ctx context.Context, in *SaveBlackboardRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_SaveBlackboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) ClearBlackboard(ctx context.Context, in *ClearBlackboardRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_ClearBlackboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) GetDirtyLinks(ctx context.Context, in *GetDirtyLinksRequest, opts ...grpc.CallOption) (*GetDirtyLinksResponse, error) {
	out := new(GetDirtyLinksResponse)
	err := c.cc.Invoke(ctx, Depi_GetDirtyLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) GetDirtyLinksAsStream(ctx context.Context, in *GetDirtyLinksRequest, opts ...grpc.CallOption) (Depi_GetDirtyLinksAsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Depi_ServiceDesc.Streams[1], Depi_GetDirtyLinksAsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &depiGetDirtyLinksAsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Depi_GetDirtyLinksAsStreamClient interface {
	Recv() (*GetDirtyLinksAsStreamResponse, error)
	grpc.ClientStream
}

type depiGetDirtyLinksAsStreamClient struct {
	grpc.ClientStream
}

func (x *depiGetDirtyLinksAsStreamClient) Recv() (*GetDirtyLinksAsStreamResponse, error) {
	m := new(GetDirtyLinksAsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *depiClient) MarkLinksClean(ctx context.Context, in *MarkLinksCleanRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_MarkLinksClean_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) MarkInferredDirtinessClean(ctx context.Context, in *MarkInferredDirtinessCleanRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_MarkInferredDirtinessClean_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) GetBidirectionalChanges(ctx context.Context, in *GetBidirectionalChangesRequest, opts ...grpc.CallOption) (*GetBidirectionalChangesResponse, error) {
	out := new(GetBidirectionalChangesResponse)
	err := c.cc.Invoke(ctx, Depi_GetBidirectionalChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) ApproveBidirectionalChange(ctx context.Context, in *ApproveBidirectionalChangeRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_ApproveBidirectionalChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) GetResourceGroups(ctx context.Context, in *GetResourceGroupsRequest, opts ...grpc.CallOption) (*GetResourceGroupsResponse, error) {
	out := new(GetResourceGroupsResponse)
	err := c.cc.Invoke(ctx, Depi_GetResourceGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	out := new(GetResourcesResponse)
	err := c.cc.Invoke(ctx, Depi_GetResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) GetResourcesAsStream(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (Depi_GetResourcesAsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Depi_ServiceDesc.Streams[2], Depi_GetResourcesAsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &depiGetResourcesAsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Depi_GetResourcesAsStreamClient interface {
	Recv() (*GetResourcesAsStreamResponse, error)
	grpc.ClientStream
}

type depiGetResourcesAsStreamClient struct {
	grpc.ClientStream
}

func (x *depiGetResourcesAsStreamClient) Recv() (*GetResourcesAsStreamResponse, error) {
	m := new(GetResourcesAsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *depiClient) GetLinks(ctx context.Context, in *GetLinksRequest, opts ...grpc.CallOption) (*GetLinksResponse, error) {
	out := new(GetLinksResponse)
	err := c.cc.Invoke(ctx, Depi_GetLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) GetAllLinksAsStream(ctx context.Context, in *GetAllLinksAsStreamRequest, opts ...grpc.CallOption) (Depi_GetAllLinksAsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Depi_ServiceDesc.Streams[3], Depi_GetAllLinksAsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &depiGetAllLinksAsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Depi_GetAllLinksAsStreamClient interface {
	Recv() (*GetLinksAsStreamResponse, error)
	grpc.ClientStream
}

type depiGetAllLinksAsStreamClient struct {
	grpc.ClientStream
}

func (x *depiGetAllLinksAsStreamClient) Recv() (*GetLinksAsStreamResponse, error) {
	m := new(GetLinksAsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *depiClient) GetLinksAsStream(ctx context.Context, in *GetLinksRequest, opts ...grpc.CallOption) (Depi_GetLinksAsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Depi_ServiceDesc.Streams[4], Depi_GetLinksAsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &depiGetLinksAsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Depi_GetLinksAsStreamClient interface {
	Recv() (*GetLinksAsStreamResponse, error)
	grpc.ClientStream
}

type depiGetLinksAsStreamClient struct {
	grpc.ClientStream
}

func (x *depiGetLinksAsStreamClient) Recv() (*GetLinksAsStreamResponse, error) {
	m := new(GetLinksAsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *depiClient) GetDependencyGraph(ctx context.Context, in *GetDependencyGraphRequest, opts ...grpc.CallOption) (*GetDependencyGraphResponse, error) {
	out := new(GetDependencyGraphResponse)
	err := c.cc.Invoke(ctx, Depi_GetDependencyGraph_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) GetBranchList(ctx context.Context, in *GetBranchListRequest, opts ...grpc.CallOption) (*GetBranchListResponse, error) {
	out := new(GetBranchListResponse)
	err := c.cc.Invoke(ctx, Depi_GetBranchList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) UpdateDepi(ctx context.Context, in *UpdateDepiRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_UpdateDepi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) WatchBlackboard(ctx context.Context, in *WatchBlackboardRequest, opts ...grpc.CallOption) (Depi_WatchBlackboardClient, error) {
	stream, err := c.cc.NewStream(ctx, &Depi_ServiceDesc.Streams[5], Depi_WatchBlackboard_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &depiWatchBlackboardClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Depi_WatchBlackboardClient interface {
	Recv() (*BlackboardUpdate, error)
	grpc.ClientStream
}

type depiWatchBlackboardClient struct {
	grpc.ClientStream
}

func (x *depiWatchBlackboardClient) Recv() (*BlackboardUpdate, error) {
	m := new(BlackboardUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *depiClient) WatchDepi(ctx context.Context, in *WatchDepiRequest, opts ...grpc.CallOption) (Depi_WatchDepiClient, error) {
	stream, err := c.cc.NewStream(ctx, &Depi_ServiceDesc.Streams[6], Depi_WatchDepi_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &depiWatchDepiClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Depi_WatchDepiClient interface {
	Recv() (*DepiUpdate, error)
	grpc.ClientStream
}

type depiWatchDepiClient struct {
	grpc.ClientStream
}

func (x *depiWatchDepiClient) Recv() (*DepiUpdate, error) {
	m := new(DepiUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *depiClient) UnwatchBlackboard(ctx context.Context, in *UnwatchBlackboardRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_UnwatchBlackboard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) UnwatchDepi(ctx context.Context, in *UnwatchDepiRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_UnwatchDepi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) AddResourceGroup(ctx context.Context, in *AddResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_AddResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) EditResourceGroup(ctx context.Context, in *EditResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_EditResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) RemoveResourceGroup(ctx context.Context, in *RemoveResourceGroupRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_RemoveResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_AddResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) LinkResources(ctx context.Context, in *LinkResourcesRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_LinkResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) UnlinkResources(ctx context.Context, in *UnlinkResourcesRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, Depi_UnlinkResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) CurrentBranch(ctx context.Context, in *CurrentBranchRequest, opts ...grpc.CallOption) (*CurrentBranchResponse, error) {
	out := new(CurrentBranchResponse)
	err := c.cc.Invoke(ctx, Depi_CurrentBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) GetResourceGroupsForTag(ctx context.Context, in *GetResourceGroupsForTagRequest, opts ...grpc.CallOption) (*GetResourceGroupsResponse, error) {
	out := new(GetResourceGroupsResponse)
	err := c.cc.Invoke(ctx, Depi_GetResourceGroupsForTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depiClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Depi_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepiServer is the server API for Depi service.
// All implementations must embed UnimplementedDepiServer
// for forward compatibility
type DepiServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	LoginWithToken(context.Context, *LoginWithTokenRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*GenericResponse, error)
	RegisterCallback(*RegisterCallbackRequest, Depi_RegisterCallbackServer) error
	WatchResourceGroup(context.Context, *WatchResourceGroupRequest) (*GenericResponse, error)
	UnwatchResourceGroup(context.Context, *UnwatchResourceGroupRequest) (*GenericResponse, error)
	CreateBranch(context.Context, *CreateBranchRequest) (*GenericResponse, error)
	SetBranch(context.Context, *SetBranchRequest) (*GenericResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*GenericResponse, error)
	GetLastKnownVersion(context.Context, *GetLastKnownVersionRequest) (*GetLastKnownVersionResponse, error)
	UpdateResourceGroup(context.Context, *UpdateResourceGroupRequest) (*GenericResponse, error)
	AddResourcesToBlackboard(context.Context, *AddResourcesToBlackboardRequest) (*GenericResponse, error)
	RemoveResourcesFromBlackboard(context.Context, *RemoveResourcesFromBlackboardRequest) (*GenericResponse, error)
	LinkBlackboardResources(context.Context, *LinkBlackboardResourcesRequest) (*GenericResponse, error)
	UnlinkBlackboardResources(context.Context, *UnlinkBlackboardResourcesRequest) (*GenericResponse, error)
	GetBlackboardResources(context.Context, *GetBlackboardResourcesRequest) (*GetBlackboardResourcesResponse, error)
	SaveBlackboard(context.Context, *SaveBlackboardRequest) (*GenericResponse, error)
	ClearBlackboard(context.Context, *ClearBlackboardRequest) (*GenericResponse, error)
	GetDirtyLinks(context.Context, *GetDirtyLinksRequest) (*GetDirtyLinksResponse, error)
	GetDirtyLinksAsStream(*GetDirtyLinksRequest, Depi_GetDirtyLinksAsStreamServer) error
	MarkLinksClean(context.Context, *MarkLinksCleanRequest) (*GenericResponse, error)
	MarkInferredDirtinessClean(context.Context, *MarkInferredDirtinessCleanRequest) (*GenericResponse, error)
	GetBidirectionalChanges(context.Context, *GetBidirectionalChangesRequest) (*GetBidirectionalChangesResponse, error)
	ApproveBidirectionalChange(context.Context, *ApproveBidirectionalChangeRequest) (*GenericResponse, error)
	GetResourceGroups(context.Context, *GetResourceGroupsRequest) (*GetResourceGroupsResponse, error)
	GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error)
	GetResourcesAsStream(*GetResourcesRequest, Depi_GetResourcesAsStreamServer) error
	GetLinks(context.Context, *GetLinksRequest) (*GetLinksResponse, error)
	GetAllLinksAsStream(*GetAllLinksAsStreamRequest, Depi_GetAllLinksAsStreamServer) error
	GetLinksAsStream(*GetLinksRequest, Depi_GetLinksAsStreamServer) error
	GetDependencyGraph(context.Context, *GetDependencyGraphRequest) (*GetDependencyGraphResponse, error)
	GetBranchList(context.Context, *GetBranchListRequest) (*GetBranchListResponse, error)
	UpdateDepi(context.Context, *UpdateDepiRequest) (*GenericResponse, error)
	WatchBlackboard(*WatchBlackboardRequest, Depi_WatchBlackboardServer) error
	WatchDepi(*WatchDepiRequest, Depi_WatchDepiServer) error
	UnwatchBlackboard(context.Context, *UnwatchBlackboardRequest) (*GenericResponse, error)
	UnwatchDepi(context.Context, *UnwatchDepiRequest) (*GenericResponse, error)
	AddResourceGroup(context.Context, *AddResourceGroupRequest) (*GenericResponse, error)
	EditResourceGroup(context.Context, *EditResourceGroupRequest) (*GenericResponse, error)
	RemoveResourceGroup(context.Context, *RemoveResourceGroupRequest) (*GenericResponse, error)
	AddResource(context.Context, *AddResourceRequest) (*GenericResponse, error)
	LinkResources(context.Context, *LinkResourcesRequest) (*GenericResponse, error)
	UnlinkResources(context.Context, *UnlinkResourcesRequest) (*GenericResponse, error)
	CurrentBranch(context.Context, *CurrentBranchRequest) (*CurrentBranchResponse, error)
	GetResourceGroupsForTag(context.Context, *GetResourceGroupsForTagRequest) (*GetResourceGroupsResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedDepiServer()
}

// UnimplementedDepiServer must be embedded to have forward compatible implementations.
type UnimplementedDepiServer struct {
}

func (UnimplementedDepiServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDepiServer) LoginWithToken(context.Context, *LoginWithTokenRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithToken not implemented")
}
func (UnimplementedDepiServer) Logout(context.Context, *LogoutRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedDepiServer) RegisterCallback(*RegisterCallbackRequest, Depi_RegisterCallbackServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterCallback not implemented")
}
func (UnimplementedDepiServer) WatchResourceGroup(context.Context, *WatchResourceGroupRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchResourceGroup not implemented")
}
func (UnimplementedDepiServer) UnwatchResourceGroup(context.Context, *UnwatchResourceGroupRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnwatchResourceGroup not implemented")
}
func (UnimplementedDepiServer) CreateBranch(context.Context, *CreateBranchRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (UnimplementedDepiServer) SetBranch(context.Context, *SetBranchRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBranch not implemented")
}
func (UnimplementedDepiServer) CreateTag(context.Context, *CreateTagRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedDepiServer) GetLastKnownVersion(context.Context, *GetLastKnownVersionRequest) (*GetLastKnownVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastKnownVersion not implemented")
}
func (UnimplementedDepiServer) UpdateResourceGroup(context.Context, *UpdateResourceGroupRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceGroup not implemented")
}
func (UnimplementedDepiServer) AddResourcesToBlackboard(context.Context, *AddResourcesToBlackboardRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourcesToBlackboard not implemented")
}
func (UnimplementedDepiServer) RemoveResourcesFromBlackboard(context.Context, *RemoveResourcesFromBlackboardRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResourcesFromBlackboard not implemented")
}
func (UnimplementedDepiServer) LinkBlackboardResources(context.Context, *LinkBlackboardResourcesRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkBlackboardResources not implemented")
}
func (UnimplementedDepiServer) UnlinkBlackboardResources(context.Context, *UnlinkBlackboardResourcesRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkBlackboardResources not implemented")
}
func (UnimplementedDepiServer) GetBlackboardResources(context.Context, *GetBlackboardResourcesRequest) (*GetBlackboardResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlackboardResources not implemented")
}
func (UnimplementedDepiServer) SaveBlackboard(context.Context, *SaveBlackboardRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBlackboard not implemented")
}
func (UnimplementedDepiServer) ClearBlackboard(context.Context, *ClearBlackboardRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearBlackboard not implemented")
}
func (UnimplementedDepiServer) GetDirtyLinks(context.Context, *GetDirtyLinksRequest) (*GetDirtyLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirtyLinks not implemented")
}
func (UnimplementedDepiServer) GetDirtyLinksAsStream(*GetDirtyLinksRequest, Depi_GetDirtyLinksAsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDirtyLinksAsStream not implemented")
}
func (UnimplementedDepiServer) MarkLinksClean(context.Context, *MarkLinksCleanRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkLinksClean not implemented")
}
func (UnimplementedDepiServer) MarkInferredDirtinessClean(context.Context, *MarkInferredDirtinessCleanRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkInferredDirtinessClean not implemented")
}
func (UnimplementedDepiServer) GetBidirectionalChanges(context.Context, *GetBidirectionalChangesRequest) (*GetBidirectionalChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBidirectionalChanges not implemented")
}
func (UnimplementedDepiServer) ApproveBidirectionalChange(context.Context, *ApproveBidirectionalChangeRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveBidirectionalChange not implemented")
}
func (UnimplementedDepiServer) GetResourceGroups(context.Context, *GetResourceGroupsRequest) (*GetResourceGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceGroups not implemented")
}
func (UnimplementedDepiServer) GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedDepiServer) GetResourcesAsStream(*GetResourcesRequest, Depi_GetResourcesAsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResourcesAsStream not implemented")
}
func (UnimplementedDepiServer) GetLinks(context.Context, *GetLinksRequest) (*GetLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinks not implemented")
}
func (UnimplementedDepiServer) GetAllLinksAsStream(*GetAllLinksAsStreamRequest, Depi_GetAllLinksAsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllLinksAsStream not implemented")
}
func (UnimplementedDepiServer) GetLinksAsStream(*GetLinksRequest, Depi_GetLinksAsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLinksAsStream not implemented")
}
func (UnimplementedDepiServer) GetDependencyGraph(context.Context, *GetDependencyGraphRequest) (*GetDependencyGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDependencyGraph not implemented")
}
func (UnimplementedDepiServer) GetBranchList(context.Context, *GetBranchListRequest) (*GetBranchListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranchList not implemented")
}
func (UnimplementedDepiServer) UpdateDepi(context.Context, *UpdateDepiRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepi not implemented")
}
func (UnimplementedDepiServer) WatchBlackboard(*WatchBlackboardRequest, Depi_WatchBlackboardServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBlackboard not implemented")
}
func (UnimplementedDepiServer) WatchDepi(*WatchDepiRequest, Depi_WatchDepiServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchDepi not implemented")
}
func (UnimplementedDepiServer) UnwatchBlackboard(context.Context, *UnwatchBlackboardRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnwatchBlackboard not implemented")
}
func (UnimplementedDepiServer) UnwatchDepi(context.Context, *UnwatchDepiRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnwatchDepi not implemented")
}
func (UnimplementedDepiServer) AddResourceGroup(context.Context, *AddResourceGroupRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceGroup not implemented")
}
func (UnimplementedDepiServer) EditResourceGroup(context.Context, *EditResourceGroupRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditResourceGroup not implemented")
}
func (UnimplementedDepiServer) RemoveResourceGroup(context.Context, *RemoveResourceGroupRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResourceGroup not implemented")
}
func (UnimplementedDepiServer) AddResource(context.Context, *AddResourceRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedDepiServer) LinkResources(context.Context, *LinkResourcesRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkResources not implemented")
}
func (UnimplementedDepiServer) UnlinkResources(context.Context, *UnlinkResourcesRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkResources not implemented")
}
func (UnimplementedDepiServer) CurrentBranch(context.Context, *CurrentBranchRequest) (*CurrentBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentBranch not implemented")
}
func (UnimplementedDepiServer) GetResourceGroupsForTag(context.Context, *GetResourceGroupsForTagRequest) (*GetResourceGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceGroupsForTag not implemented")
}
func (UnimplementedDepiServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDepiServer) mustEmbedUnimplementedDepiServer() {}

// UnsafeDepiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepiServer will
// result in compilation errors.
type UnsafeDepiServer interface {
	mustEmbedUnimplementedDepiServer()
}

func RegisterDepiServer(s grpc.ServiceRegistrar, srv DepiServer) {
	s.RegisterService(&Depi_ServiceDesc, srv)
}

func _Depi_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_LoginWithToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).LoginWithToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_LoginWithToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).LoginWithToken(ctx, req.(*LoginWithTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_RegisterCallback_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterCallbackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DepiServer).RegisterCallback(m, &depiRegisterCallbackServer{stream})
}

type Depi_RegisterCallbackServer interface {
	Send(*ResourcesUpdatedNotification) error
	grpc.ServerStream
}

type depiRegisterCallbackServer struct {
	grpc.ServerStream
}

func (x *depiRegisterCallbackServer) Send(m *ResourcesUpdatedNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _Depi_WatchResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).WatchResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_WatchResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).WatchResourceGroup(ctx, req.(*WatchResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_UnwatchResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnwatchResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).UnwatchResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_UnwatchResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).UnwatchResourceGroup(ctx, req.(*UnwatchResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_CreateBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_SetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).SetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_SetBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).SetBranch(ctx, req.(*SetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_GetLastKnownVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastKnownVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).GetLastKnownVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_GetLastKnownVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).GetLastKnownVersion(ctx, req.(*GetLastKnownVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_UpdateResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).UpdateResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_UpdateResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).UpdateResourceGroup(ctx, req.(*UpdateResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_AddResourcesToBlackboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourcesToBlackboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).AddResourcesToBlackboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_AddResourcesToBlackboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).AddResourcesToBlackboard(ctx, req.(*AddResourcesToBlackboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_RemoveResourcesFromBlackboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveResourcesFromBlackboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).RemoveResourcesFromBlackboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_RemoveResourcesFromBlackboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).RemoveResourcesFromBlackboard(ctx, req.(*RemoveResourcesFromBlackboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_LinkBlackboardResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkBlackboardResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).LinkBlackboardResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_LinkBlackboardResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).LinkBlackboardResources(ctx, req.(*LinkBlackboardResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_UnlinkBlackboardResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkBlackboardResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).UnlinkBlackboardResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_UnlinkBlackboardResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).UnlinkBlackboardResources(ctx, req.(*UnlinkBlackboardResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_GetBlackboardResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlackboardResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).GetBlackboardResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_GetBlackboardResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).GetBlackboardResources(ctx, req.(*GetBlackboardResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_SaveBlackboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBlackboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).SaveBlackboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_SaveBlackboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).SaveBlackboard(ctx, req.(*SaveBlackboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_ClearBlackboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearBlackboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).ClearBlackboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_ClearBlackboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).ClearBlackboard(ctx, req.(*ClearBlackboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_GetDirtyLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirtyLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).GetDirtyLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_GetDirtyLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).GetDirtyLinks(ctx, req.(*GetDirtyLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_GetDirtyLinksAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDirtyLinksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DepiServer).GetDirtyLinksAsStream(m, &depiGetDirtyLinksAsStreamServer{stream})
}

type Depi_GetDirtyLinksAsStreamServer interface {
	Send(*GetDirtyLinksAsStreamResponse) error
	grpc.ServerStream
}

type depiGetDirtyLinksAsStreamServer struct {
	grpc.ServerStream
}

func (x *depiGetDirtyLinksAsStreamServer) Send(m *GetDirtyLinksAsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Depi_MarkLinksClean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkLinksCleanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).MarkLinksClean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_MarkLinksClean_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).MarkLinksClean(ctx, req.(*MarkLinksCleanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_MarkInferredDirtinessClean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkInferredDirtinessCleanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).MarkInferredDirtinessClean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_MarkInferredDirtinessClean_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).MarkInferredDirtinessClean(ctx, req.(*MarkInferredDirtinessCleanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_GetBidirectionalChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBidirectionalChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).GetBidirectionalChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_GetBidirectionalChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).GetBidirectionalChanges(ctx, req.(*GetBidirectionalChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_ApproveBidirectionalChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveBidirectionalChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).ApproveBidirectionalChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_ApproveBidirectionalChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).ApproveBidirectionalChange(ctx, req.(*ApproveBidirectionalChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_GetResourceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).GetResourceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_GetResourceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).GetResourceGroups(ctx, req.(*GetResourceGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_GetResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).GetResources(ctx, req.(*GetResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_GetResourcesAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetResourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DepiServer).GetResourcesAsStream(m, &depiGetResourcesAsStreamServer{stream})
}

type Depi_GetResourcesAsStreamServer interface {
	Send(*GetResourcesAsStreamResponse) error
	grpc.ServerStream
}

type depiGetResourcesAsStreamServer struct {
	grpc.ServerStream
}

func (x *depiGetResourcesAsStreamServer) Send(m *GetResourcesAsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Depi_GetLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).GetLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_GetLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).GetLinks(ctx, req.(*GetLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_GetAllLinksAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllLinksAsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DepiServer).GetAllLinksAsStream(m, &depiGetAllLinksAsStreamServer{stream})
}

type Depi_GetAllLinksAsStreamServer interface {
	Send(*GetLinksAsStreamResponse) error
	grpc.ServerStream
}

type depiGetAllLinksAsStreamServer struct {
	grpc.ServerStream
}

func (x *depiGetAllLinksAsStreamServer) Send(m *GetLinksAsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Depi_GetLinksAsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLinksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DepiServer).GetLinksAsStream(m, &depiGetLinksAsStreamServer{stream})
}

type Depi_GetLinksAsStreamServer interface {
	Send(*GetLinksAsStreamResponse) error
	grpc.ServerStream
}

type depiGetLinksAsStreamServer struct {
	grpc.ServerStream
}

func (x *depiGetLinksAsStreamServer) Send(m *GetLinksAsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Depi_GetDependencyGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDependencyGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).GetDependencyGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_GetDependencyGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).GetDependencyGraph(ctx, req.(*GetDependencyGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_GetBranchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).GetBranchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_GetBranchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).GetBranchList(ctx, req.(*GetBranchListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_UpdateDepi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).UpdateDepi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_UpdateDepi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).UpdateDepi(ctx, req.(*UpdateDepiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_WatchBlackboard_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBlackboardRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DepiServer).WatchBlackboard(m, &depiWatchBlackboardServer{stream})
}

type Depi_WatchBlackboardServer interface {
	Send(*BlackboardUpdate) error
	grpc.ServerStream
}

type depiWatchBlackboardServer struct {
	grpc.ServerStream
}

func (x *depiWatchBlackboardServer) Send(m *BlackboardUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Depi_WatchDepi_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchDepiRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DepiServer).WatchDepi(m, &depiWatchDepiServer{stream})
}

type Depi_WatchDepiServer interface {
	Send(*DepiUpdate) error
	grpc.ServerStream
}

type depiWatchDepiServer struct {
	grpc.ServerStream
}

func (x *depiWatchDepiServer) Send(m *DepiUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Depi_UnwatchBlackboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnwatchBlackboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).UnwatchBlackboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_UnwatchBlackboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).UnwatchBlackboard(ctx, req.(*UnwatchBlackboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_UnwatchDepi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnwatchDepiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).UnwatchDepi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_UnwatchDepi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).UnwatchDepi(ctx, req.(*UnwatchDepiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_AddResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).AddResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_AddResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).AddResourceGroup(ctx, req.(*AddResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_EditResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).EditResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_EditResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).EditResourceGroup(ctx, req.(*EditResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_RemoveResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).RemoveResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_RemoveResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).RemoveResourceGroup(ctx, req.(*RemoveResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_AddResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).AddResource(ctx, req.(*AddResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_LinkResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).LinkResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_LinkResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).LinkResources(ctx, req.(*LinkResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_UnlinkResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).UnlinkResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_UnlinkResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).UnlinkResources(ctx, req.(*UnlinkResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_CurrentBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).CurrentBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_CurrentBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).CurrentBranch(ctx, req.(*CurrentBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_GetResourceGroupsForTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceGroupsForTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).GetResourceGroupsForTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_GetResourceGroupsForTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).GetResourceGroupsForTag(ctx, req.(*GetResourceGroupsForTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Depi_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepiServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Depi_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepiServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Depi_ServiceDesc is the grpc.ServiceDesc for Depi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Depi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Depi",
	HandlerType: (*DepiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Depi_Login_Handler,
		},
		{
			MethodName: "LoginWithToken",
			Handler:    _Depi_LoginWithToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Depi_Logout_Handler,
		},
		{
			MethodName: "WatchResourceGroup",
			Handler:    _Depi_WatchResourceGroup_Handler,
		},
		{
			MethodName: "UnwatchResourceGroup",
			Handler:    _Depi_UnwatchResourceGroup_Handler,
		},
		{
			MethodName: "CreateBranch",
			Handler:    _Depi_CreateBranch_Handler,
		},
		{
			MethodName: "SetBranch",
			Handler:    _Depi_SetBranch_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Depi_CreateTag_Handler,
		},
		{
			MethodName: "GetLastKnownVersion",
			Handler:    _Depi_GetLastKnownVersion_Handler,
		},
		{
			MethodName: "UpdateResourceGroup",
			Handler:    _Depi_UpdateResourceGroup_Handler,
		},
		{
			MethodName: "AddResourcesToBlackboard",
			Handler:    _Depi_AddResourcesToBlackboard_Handler,
		},
		{
			MethodName: "RemoveResourcesFromBlackboard",
			Handler:    _Depi_RemoveResourcesFromBlackboard_Handler,
		},
		{
			MethodName: "LinkBlackboardResources",
			Handler:    _Depi_LinkBlackboardResources_Handler,
		},
		{
			MethodName: "UnlinkBlackboardResources",
			Handler:    _Depi_UnlinkBlackboardResources_Handler,
		},
		{
			MethodName: "GetBlackboardResources",
			Handler:    _Depi_GetBlackboardResources_Handler,
		},
		{
			MethodName: "SaveBlackboard",
			Handler:    _Depi_SaveBlackboard_Handler,
		},
		{
			MethodName: "ClearBlackboard",
			Handler:    _Depi_ClearBlackboard_Handler,
		},
		{
			MethodName: "GetDirtyLinks",
			Handler:    _Depi_GetDirtyLinks_Handler,
		},
		{
			MethodName: "MarkLinksClean",
			Handler:    _Depi_MarkLinksClean_Handler,
		},
		{
			MethodName: "MarkInferredDirtinessClean",
			Handler:    _Depi_MarkInferredDirtinessClean_Handler,
		},
		{
			MethodName: "GetBidirectionalChanges",
			Handler:    _Depi_GetBidirectionalChanges_Handler,
		},
		{
			MethodName: "ApproveBidirectionalChange",
			Handler:    _Depi_ApproveBidirectionalChange_Handler,
		},
		{
			MethodName: "GetResourceGroups",
			Handler:    _Depi_GetResourceGroups_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _Depi_GetResources_Handler,
		},
		{
			MethodName: "GetLinks",
			Handler:    _Depi_GetLinks_Handler,
		},
		{
			MethodName: "GetDependencyGraph",
			Handler:    _Depi_GetDependencyGraph_Handler,
		},
		{
			MethodName: "GetBranchList",
			Handler:    _Depi_GetBranchList_Handler,
		},
		{
			MethodName: "UpdateDepi",
			Handler:    _Depi_UpdateDepi_Handler,
		},
		{
			MethodName: "UnwatchBlackboard",
			Handler:    _Depi_UnwatchBlackboard_Handler,
		},
		{
			MethodName: "UnwatchDepi",
			Handler:    _Depi_UnwatchDepi_Handler,
		},
		{
			MethodName: "AddResourceGroup",
			Handler:    _Depi_AddResourceGroup_Handler,
		},
		{
			MethodName: "EditResourceGroup",
			Handler:    _Depi_EditResourceGroup_Handler,
		},
		{
			MethodName: "RemoveResourceGroup",
			Handler:    _Depi_RemoveResourceGroup_Handler,
		},
		{
			MethodName: "AddResource",
			Handler:    _Depi_AddResource_Handler,
		},
		{
			MethodName: "LinkResources",
			Handler:    _Depi_LinkResources_Handler,
		},
		{
			MethodName: "UnlinkResources",
			Handler:    _Depi_UnlinkResources_Handler,
		},
		{
			MethodName: "CurrentBranch",
			Handler:    _Depi_CurrentBranch_Handler,
		},
		{
			MethodName: "GetResourceGroupsForTag",
			Handler:    _Depi_GetResourceGroupsForTag_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Depi_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterCallback",
			Handler:       _Depi_RegisterCallback_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDirtyLinksAsStream",
			Handler:       _Depi_GetDirtyLinksAsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResourcesAsStream",
			Handler:       _Depi_GetResourcesAsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllLinksAsStream",
			Handler:       _Depi_GetAllLinksAsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetLinksAsStream",
			Handler:       _Depi_GetLinksAsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBlackboard",
			Handler:       _Depi_WatchBlackboard_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchDepi",
			Handler:       _Depi_WatchDepi_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "depi.proto",
}
