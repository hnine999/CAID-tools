/*globals define, $*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu Dec 08 2022 16:10:24 GMT-0600 (Central Standard Time).
 */

define([
    'webgme-depi/vscodeDepiApi',
    // 'webgme-depi/vscodeDepiApiMock',
    'webgme-depi/CONSTANTS',
    'css!./styles/DepiResourceVizWidget.css'
], function (vscodeDepiApi, CONSTANTS) {
    'use strict';
    const MOCK = false;
    const WIDGET_CLASS = 'depi-resource-viz';
    let isSameResource;
    let getResourceGroupInfo;

    function DepiResourceVizWidget(logger, container, client) {
        this._logger = logger.fork('Widget');

        this._el = container;
        this._client = client;
        // this._vscodeDepiApi = MOCK ? vscodeDepiApiMock(client) : vscodeDepiApi(client);
        this._vscodeDepiApi = vscodeDepiApi(client);
        // Sync helpers
        ({ isSameResource, getResourceGroupInfo } = this._vscodeDepiApi);
        this._desc = null;
        this._initialize();
        this._onDepiUpdated = (data) => {
            console.log('_onDepiUpdated', data);
            const desc = this._desc; // desc doesn't change
            this.removeNode();
            this.addNode(desc);
        };
        this._vscodeDepiApi.addOnDepiUpdatedHandler(this._onDepiUpdated);
        this._logger.debug('ctor finished');
    }

    DepiResourceVizWidget.prototype._initialize = function () {
        const width = this._el.width();
        const height = this._el.height();

        // set widget class
        this._el.addClass(WIDGET_CLASS);
    };

    DepiResourceVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...', width, height);
    };

    DepiResourceVizWidget.prototype._getDepiData = async function (nodeId) {
        const result = {
            branchName: 'main',
            resource: null,
            inheritedResource: null,
            isDirty: false,
            dependencies: null,
            dependants: null,
        };
        /**
        * @type webgme.Client
        */
        const client = this._client;

        const { toolId, resourceGroupUrl } = getResourceGroupInfo();

        let baseId = nodeId;
        const resourceRefs = [];
        while (baseId) {
            const gmeNode = client.getNode(baseId);
            resourceRefs.push({
                toolId,
                resourceGroupUrl,
                url: baseId + '/',
            });
            baseId = gmeNode.getBaseId();
        }

        result.branchName = await this._vscodeDepiApi.getBranchName();

        const resources = await this._vscodeDepiApi.getResourceInfo(resourceRefs);

        if (resources.length === 0) {
            return result;
        }

        for (const resourceRef of resourceRefs) {
            const resource = resources.find(r => r.url === resourceRef.url)
            if (resource) {
                if (resource.url === nodeId + '/') {
                    result.resource = resource;
                    result.inheritedResource = resource;
                } else {
                    result.inheritedResource = resource;
                }
                break;
            }
        }

        if (result.inheritedResource) {
            const depGraph = await this._vscodeDepiApi.getDependencies(result.inheritedResource);
            result.dependencies = depGraph.links.map(({ target }) => target);
            result.isDirty = depGraph.links.some(link => link.dirty || link.inferredDirtiness.length > 0);
        }

        if (result.resource) {
            const depGraph = await this._vscodeDepiApi.getDependants(result.resource);
            result.dependants = depGraph.links.map(({ source }) => source);
        }

        return result;
    }

    // Adding/Removing/Updating items
    DepiResourceVizWidget.prototype.addNode = async function (desc) {
        if (!desc) {
            return;
        }

        const widget = this;
        const startLoad = () => {
            widget.removeNode();
            widget._el.append($('<h1>', { text: `Loading ...` }));
        };

        const finishLoad = () => {
            widget._el.empty();
            widget.addNode(desc);
        };

        this._desc = desc;
        console.log(JSON.stringify(desc));

        // First check if this is even a Depi Component
        if (!desc.isDepiComponent) {
            this._el.append($('<h4>', { text: `Not a Depi Component` }));
            this._el.append($('<p>', {
                text: `There is no attribute '${CONSTANTS.DEPI_ID_ATTRIBUTE}'
 defined at any of the meta-types for the current node. If you want to be able to link it using depi you need to modify
 the meta model to define the attribute.`}));
            return;
        }

        let depiData = null;
        try {
            depiData = await this._getDepiData(desc.id);
        } catch (err) {
            console.error(err);
            this._el.append($('<h4>', { text: `No Depi-API available` }));
            this._el.append($('<p>', {
                text: `To access depi related information, make sure to open up the model using
     the vscode extension and that you can establish a connection to the depi server from there.`}));
            return;
        }

        const { resource, inheritedResource, branchName, isDirty } = depiData;
        console.log(JSON.stringify(depiData, null, 2));
        let isNotMain = false;

        if (branchName !== 'main') {
            this._el.append($('<h5>', {
                text: `Read-only data from depi-branch "${branchName}".`,
                style: 'color: grey;'
            }));
            isNotMain = true;
        }

        /**
         * @type webgme.Client
         */
        const client = this._client;
        const vscodeDepiApi = this._vscodeDepiApi;

        const showBlackboardBtn = $('<a href="#" class="btn btn-default">Show Blackboard</a>');
        showBlackboardBtn.on('click', async (event) => {
            event.stopPropagation();
            event.preventDefault();
            await vscodeDepiApi.showBlackboard();
        });

        const addAsResourceBtn = $('<a href="#" class="btn btn-default">Add as Resource</a>');
        addAsResourceBtn.on('click', async (event) => {
            event.stopPropagation();
            event.preventDefault();
            // startLoad();

            const resourceGroupInfo = vscodeDepiApi.getResourceGroupInfo();
            const resource = { ...resourceGroupInfo, name: desc.name, id: desc.guid, url: desc.id + '/' };
            console.log('resource', JSON.stringify(resource, null, 2));
            await vscodeDepiApi.addAsResource(resource);
            // finishLoad();
        });

        const removeAsResourceBtn = $('<a href="#" class="btn btn-default">Remove as Resource</a>');
        removeAsResourceBtn.on('click', async (event) => {
            event.stopPropagation();
            event.preventDefault();
            // startLoad();

            await vscodeDepiApi.removeAsResource(resource);
            // finishLoad();
        });

        function getDepList(items, readOnly, isDependants) {
            const ul = $('<ul>');
            ul.append(items.map((depResource) => {
                const li = $('<li>');
                console.log(depResource);
                li.append($('<a>', { text: depResource.name, href: '#' })
                    .on('click', async (event) => {
                        event.stopPropagation();
                        event.preventDefault();
                        await vscodeDepiApi.revealResource(depResource);
                    }));

                if (!readOnly) {
                    li.append($('<i>', {
                        class: 'glyphicon glyphicon-remove-circle',
                        title: isDependants ? 'Unlink dependant' : 'Remove as dependency',
                        style: 'cursor: pointer; margin-left: 20px;'
                    })
                        .on('click', async (event) => {
                            event.stopPropagation();
                            event.preventDefault();
                            // startLoad();
                            if (isDependants) {
                                await vscodeDepiApi.removeDependant(resource, depResource);
                            } else {
                                await vscodeDepiApi.removeDependency(resource, depResource);
                            }

                            // finishLoad();
                        }));
                }

                return li;
            }));

            return ul;
        }

        function getDependenciesSection(readOnly) {
            const div = $('<div>', { style: 'margin-top: 22px' });
            div.append($('<h4>', { text: 'Dependencies' }));
            div.append($('<p>', {
                text: readOnly ? 'Resources the first base node in depi directly depends on.' :
                    'Resources this node directly depends on.'
            }));
            div.append(getDepList(depiData.dependencies, readOnly, false));

            if (isDirty) {
                div.append($('<p>', {
                    text: `Resource has dirty dependencies - see dependency graph for more info.`,
                    style: 'color: brown;'
                }));
            }

            const btn = $('<a href="#" class="btn btn-default">Show Dependency Graph</a>');
            btn.on('click', async (event) => {
                event.stopPropagation();
                event.preventDefault();
                await vscodeDepiApi.showDependencyGraph(resource || inheritedResource);
            });
            div.append(btn);

            if (!readOnly) {
                const addDependencyBtn = $('<a href="#" class="btn btn-default">Add Dependency</a>');
                addDependencyBtn.on('click', async (event) => {
                    event.stopPropagation();
                    event.preventDefault();
                    // startLoad();
                    await vscodeDepiApi.addDependency(resource);
                    // finishLoad();
                });
                div.append(addDependencyBtn);
            }

            return div;
        }

        function getDependantsSection(readOnly) {
            const div = $('<div>', { style: 'margin-top: 22px' });
            div.append($('<h4>', { text: 'Dependants' }));
            div.append($('<p>', { text: 'Resources that directly depend on this node.' }));
            div.append(getDepList(depiData.dependants, readOnly, true));

            const btn = $('<a href="#" class="btn btn-default">Show Dependants Graph</a>')
                .on('click', async (event) => {
                    event.stopPropagation();
                    event.preventDefault();
                    await vscodeDepiApi.showDependantsGraph(resource);
                });
            div.append(btn);

            if (!readOnly) {
                const addDependantBtn = $('<a href="#" class="btn btn-default">Add Dependant</a>');
                addDependantBtn.on('click', async (event) => {
                    event.stopPropagation();
                    event.preventDefault();
                    // startLoad();
                    await vscodeDepiApi.addDependantBtn(resource);
                    // finishLoad();
                });

                div.append(addDependantBtn);
            }

            return div;
        }

        if (!resource && !inheritedResource) {
            if (!isNotMain) {
                this._el.append(addAsResourceBtn);
            }

            this._el.append(showBlackboardBtn);
        } else if (resource) {
            if (!isNotMain) {
                this._el.append(removeAsResourceBtn);
            }

            this._el.append([getDependenciesSection(isNotMain), getDependantsSection(isNotMain)]);
        } else {
            // Inherited only
            if (!isNotMain) {
                this._el.append(addAsResourceBtn);
            }

            this._el.append(getDependenciesSection(true));
        }
    };

    DepiResourceVizWidget.prototype.removeNode = function () {
        this._el.empty();
        this._desc = null;
    };

    DepiResourceVizWidget.prototype.updateNode = async function (desc) {
        if (!desc) {
            return;
        }

        // Reinitialize when data of interest has changed for the node.
        if (this._desc && JSON.stringify(desc) !== JSON.stringify(this._desc)) {
            this.removeNode();
            await this.addNode(desc);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    DepiResourceVizWidget.prototype.destroy = function () {
        this._vscodeDepiApi.removeOnDepiUpdatedHandler(this._onDepiUpdated);
    };

    DepiResourceVizWidget.prototype.onActivate = function () {
        this._logger.debug('DepiResourceVizWidget has been activated');
    };

    DepiResourceVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('DepiResourceVizWidget has been deactivated');
    };

    return DepiResourceVizWidget;
});
